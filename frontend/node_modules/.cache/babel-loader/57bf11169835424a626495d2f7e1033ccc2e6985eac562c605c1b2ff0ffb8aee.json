{"ast":null,"code":"var _jsxFileName = \"E:\\\\Tour Agency\\\\frontend\\\\src\\\\components\\\\DNI\\\\DniField.jsx\";\n// DniField.jsx\nimport React from 'react';\nimport { FormGroup } from \"reactstrap\";\nimport parser from 'fast-xml-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DniField = _ref => {\n  let {\n    index,\n    dni,\n    setDni,\n    userData,\n    setUserData\n  } = _ref;\n  const fetchDniData = async (dni, index) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/v1/getDniData/${dni}`);\n\n      // Comprobar el estado de la respuesta\n      if (!response.ok) {\n        console.error(`Error al obtener los datos del DNI: ${response.statusText}`);\n        alert(\"Error al obtener los datos del DNI\");\n        return;\n      }\n\n      // Intentar imprimir el texto de la respuesta\n      const text = await response.text();\n      const data = parser.parse(text); // Utiliza parser.parse en lugar de parse\n      console.log(\"Respuesta del servidor:\", data);\n\n      // Aquí 'data' es la respuesta de tu API de Reniec\n\n      // Ahora, actualiza el estado con los nuevos datos\n      setUserData(prev => {\n        const newUserData = [...prev];\n        newUserData[index] = data;\n        return newUserData;\n      });\n    } catch (error) {\n      console.error(\"Error al obtener los datos del DNI: \", error);\n      alert(\"Error al obtener los datos del DNI\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormGroup, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"DNI\",\n      value: dni || '',\n      onChange: e => {\n        let tempDni = [...dni];\n        tempDni[index] = e.target.value;\n        setDni(tempDni);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchDniData(dni[index], index),\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), userData[index] && userData[index].nombres && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Nombres: \", userData[index].nombres]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 60\n    }, this), userData[index] && userData[index].apellidoPaterno && userData[index].apellidoMaterno && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Apellidos: \", userData[index].apellidoPaterno, \" \", userData[index].apellidoMaterno]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_c = DniField;\nexport default DniField;\nvar _c;\n$RefreshReg$(_c, \"DniField\");","map":{"version":3,"names":["React","FormGroup","parser","DniField","index","dni","setDni","userData","setUserData","fetchDniData","response","fetch","ok","console","error","statusText","alert","text","data","parse","log","prev","newUserData","e","tempDni","target","value","nombres","apellidoPaterno","apellidoMaterno"],"sources":["E:/Tour Agency/frontend/src/components/DNI/DniField.jsx"],"sourcesContent":["// DniField.jsx\r\nimport React from 'react';\r\nimport { FormGroup, } from \"reactstrap\";\r\nimport parser from 'fast-xml-parser';\r\n\r\n\r\nconst DniField = ({ index, dni, setDni, userData, setUserData }) => {\r\n    const fetchDniData = async (dni, index) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3000/api/v1/getDniData/${dni}`);\r\n        \r\n            // Comprobar el estado de la respuesta\r\n            if (!response.ok) {\r\n                console.error(`Error al obtener los datos del DNI: ${response.statusText}`);\r\n                alert(\"Error al obtener los datos del DNI\");\r\n                return;\r\n            }\r\n        \r\n            // Intentar imprimir el texto de la respuesta\r\n            const text = await response.text();\r\n            const data = parser.parse(text); // Utiliza parser.parse en lugar de parse\r\n            console.log(\"Respuesta del servidor:\", data);\r\n        \r\n            // Aquí 'data' es la respuesta de tu API de Reniec\r\n        \r\n            // Ahora, actualiza el estado con los nuevos datos\r\n            setUserData(prev => {\r\n                const newUserData = [...prev];\r\n                newUserData[index] = data;\r\n                return newUserData;\r\n            });\r\n        \r\n        } catch (error) {\r\n            console.error(\"Error al obtener los datos del DNI: \", error);\r\n            alert(\"Error al obtener los datos del DNI\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <FormGroup>\r\n            <input\r\n                type=\"number\"\r\n                placeholder=\"DNI\"\r\n                value={dni || ''}\r\n                onChange={(e) => {\r\n                    let tempDni = [...dni];\r\n                    tempDni[index] = e.target.value;\r\n                    setDni(tempDni);\r\n                }}\r\n            />\r\n            <button onClick={() => fetchDniData(dni[index], index)}>\r\n                Validar\r\n            </button>\r\n\r\n            {userData[index] && userData[index].nombres && <p>Nombres: {userData[index].nombres}</p>}\r\n            {userData[index] && userData[index].apellidoPaterno && userData[index].apellidoMaterno &&\r\n                <p>Apellidos: {userData[index].apellidoPaterno} {userData[index].apellidoMaterno}</p>}\r\n\r\n        </FormGroup>\r\n    );\r\n};\r\n\r\nexport default DniField;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAS,YAAY;AACvC,OAAOC,MAAM,MAAM,iBAAiB;AAAC;AAGrC,MAAMC,QAAQ,GAAG,QAAmD;EAAA,IAAlD;IAAEC,KAAK;IAAEC,GAAG;IAAEC,MAAM;IAAEC,QAAQ;IAAEC;EAAY,CAAC;EAC3D,MAAMC,YAAY,GAAG,OAAOJ,GAAG,EAAED,KAAK,KAAK;IACvC,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,2CAA0CN,GAAI,EAAC,CAAC;;MAE9E;MACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QACdC,OAAO,CAACC,KAAK,CAAE,uCAAsCJ,QAAQ,CAACK,UAAW,EAAC,CAAC;QAC3EC,KAAK,CAAC,oCAAoC,CAAC;QAC3C;MACJ;;MAEA;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,EAAE;MAClC,MAAMC,IAAI,GAAGhB,MAAM,CAACiB,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC;MACjCJ,OAAO,CAACO,GAAG,CAAC,yBAAyB,EAAEF,IAAI,CAAC;;MAE5C;;MAEA;MACAV,WAAW,CAACa,IAAI,IAAI;QAChB,MAAMC,WAAW,GAAG,CAAC,GAAGD,IAAI,CAAC;QAC7BC,WAAW,CAAClB,KAAK,CAAC,GAAGc,IAAI;QACzB,OAAOI,WAAW;MACtB,CAAC,CAAC;IAEN,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DE,KAAK,CAAC,oCAAoC,CAAC;IAC/C;EACJ,CAAC;EAID,oBACI,QAAC,SAAS;IAAA,wBACN;MACI,IAAI,EAAC,QAAQ;MACb,WAAW,EAAC,KAAK;MACjB,KAAK,EAAEX,GAAG,IAAI,EAAG;MACjB,QAAQ,EAAGkB,CAAC,IAAK;QACb,IAAIC,OAAO,GAAG,CAAC,GAAGnB,GAAG,CAAC;QACtBmB,OAAO,CAACpB,KAAK,CAAC,GAAGmB,CAAC,CAACE,MAAM,CAACC,KAAK;QAC/BpB,MAAM,CAACkB,OAAO,CAAC;MACnB;IAAE;MAAA;MAAA;MAAA;IAAA,QACJ,eACF;MAAQ,OAAO,EAAE,MAAMf,YAAY,CAACJ,GAAG,CAACD,KAAK,CAAC,EAAEA,KAAK,CAAE;MAAA,UAAC;IAExD;MAAA;MAAA;MAAA;IAAA,QAAS,EAERG,QAAQ,CAACH,KAAK,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC,CAACuB,OAAO,iBAAI;MAAA,WAAG,WAAS,EAACpB,QAAQ,CAACH,KAAK,CAAC,CAACuB,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,EACvFpB,QAAQ,CAACH,KAAK,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC,CAACwB,eAAe,IAAIrB,QAAQ,CAACH,KAAK,CAAC,CAACyB,eAAe,iBAClF;MAAA,WAAG,aAAW,EAACtB,QAAQ,CAACH,KAAK,CAAC,CAACwB,eAAe,EAAC,GAAC,EAACrB,QAAQ,CAACH,KAAK,CAAC,CAACyB,eAAe;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QAEjF;AAEpB,CAAC;AAAC,KAxDI1B,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}